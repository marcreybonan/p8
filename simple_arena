#On importe les librairies nécessaires
#Combat 1v1, joueur contre IA
#L'IA joue après le joueur
#Barres de vie, différentes attaques et sprite
#S'inspire de l'univers Dofus, Wakfu et Weaven ainsi que des mécanismes de combat de Pokemon (tour par tour)


import tkinder as tk
import random

#On commence les déclarations de classe 
class Joueur:
def __init__(self, nom, image, attaques):
   self.nom = nom  
   self.points_de_vie = 100  
   self.attaques = attaques  
   self.image = image

def est_vivant(self):
  return self.points_de_vie > 0

def attaquer(self, autre_joueur, attaque):
   degats = self.attaques[attaque]
   autre_joueur.points_de_vie -= degats
   return degats

class Jeu:
   def __init__(self, master):
      self.master = master
      self.master.title("Arena")
      attaques_joueur1 = {
          "Tempete de puissance": random.randint(18, 20),
          "Epee celeste" : random.randint(10, 26),
          "Onde de choc" : random.randint(0, 50),
          "Bourrasque" : random.randint(13, 27),
}

attaques_joueur2 = {
    "traumatisme" : random.randint(20, 30),
    "punition" : random.randint(0, 70),
    "flux torrentiel" : random.randint(15, 22),
    "faisceau de lune" : random.randint(13, 29),
}

 self.joueur1 = Joueur("Joueur 1", tk.PhotoImage(file="joueur1.png"), attaques_joueur1)
        self.joueur2 = Joueur("Joueur 2", tk.PhotoImage(file="joueur2.png"), attaques_joueur2)

        self.cadre = tk.Frame(master)
        self.cadre.pack()

        self.canvas = tk.Canvas(self.cadre, width=600, height=400)
        self.canvas.pack()

        self.joueur1_image = self.canvas.create_image(100, 200, image=self.joueur1.image)
        self.joueur2_image = self.canvas.create_image(500, 200, image=self.joueur2.image)

        self.attaque_label = tk.Label(self.cadre, text="Choisissez une attaque:")
        self.attaque_label.pack()

        self.attaques = list(self.joueur1.attaques.keys())
        self.attaque_var = tk.StringVar(value=self.attaques[0])
        self.attaque_menu = tk.OptionMenu(self.cadre, self.attaque_var, *self.attaques)
        self.attaque_menu.pack()

        self.bouton_attaquer = tk.Button(self.cadre, text="Attaquer", command=self.attaquer)
        self.bouton_attaquer.pack()

        self.stats_label = tk.Label(self.cadre, text="")
        self.stats_label.pack()

        self.reset_button = tk.Button(self.cadre, text="Réinitialiser", command=self.reset_game)
        self.reset_button.pack()

        self.update_stats()

    def attaquer(self):
        if self.joueur1.est_vivant() and self.joueur2.est_vivant():
            attaque = self.attaque_var.get()
            degats = self.joueur1.attaquer(self.joueur2, attaque)
            self.stats_label.config(text=f"{self.joueur1.nom} utilise {attaque} ! {self.joueur2.nom} subit {degats} dégâts.")
            self.update_stats()
            if not self.joueur2.est_vivant():
                self.stats_label.config(text=f"{self.joueur2.nom} a été vaincu ! {self.joueur1.nom} remporte le combat.")
                self.bouton_attaquer.config(state=tk.DISABLED)
                return

# Tour de Joueur 2 (IA)
            if self.joueur2.est_vivant():
                attaque_choisie = random.choice(list(self.joueur2.attaques.keys()))
                degats = self.joueur2.attaquer(self.joueur1, attaque_choisie)
                self.stats_label.config(text=f"{self.joueur2.nom} utilise {attaque_choisie} ! {self.joueur1.nom} subit {degats} dégâts.")
                self.update_stats()
                if not self.joueur1.est_vivant():
                    self.stats_label.config(text=f"{self.joueur1.nom} a été vaincu ! {self.joueur2.nom} remporte le combat.")
                    self.bouton_attaquer.config(state=tk.DISABLED)

    def update_stats(self):
        stats = f"{self.joueur1.nom} a {self.joueur1.points_de_vie} PV | {self.joueur2.nom} a {self.joueur2.points_de_vie} PV"
        self.stats_label.config(text=stats)

    def reset_game(self):
        self.joueur1.points_de_vie = 100  
        self.joueur2.points_de_vie = 100  
        self.update_stats()
        self.bouton_attaquer.config(state=tk.NORMAL)
        self.stats_label.config(text="")

if __name__ == "__main__":
    root = tk.Tk()
    jeu = Jeu(root)
    root.mainloop()
